https://github.com/openshift/dockerexec/blob/master/vendor/src/github.com/docker/docker/docs/sources/articles/dockerfile_best-practices.md



https://docs.github.com/en/actions/learn-github-actions/understanding-github-actions


    GitHub provides Linux, Windows, and macOS virtual machines to run your workflows, 
        or you can host your own self-hosted runners in your own data center or cloud infrastructure.


    You can create workflows that build and test every pull request to your repository, 
        or deploy merged pull requests to production.



    You can configure a GitHub Actions workflow to be triggered when an event occurs in your repository, 
        such as a pull request being opened or an issue being created. 
        
        Your workflow contains one or more jobs which can run in sequential order or in parallel. 
    
        Each job will run inside its own virtual machine runner, or inside a container, 
        and has one or more steps that either run a script that you define or run an action, 
        which is a reusable extension that can simplify your workflow.




    --- Workflows

            A workflow is a configurable automated process that will run one or more jobs. 
            
            Workflows are defined by a YAML file checked in to your repository 
            and will run when 
                - triggered by an event in your repository, 
                - or they can be triggered manually, 
                - or at a defined schedule.


            A repository can have multiple workflows, 
                each of which can perform a different set of tasks.

        
        You can reference a workflow within another workflow. For more information, 
        see "Reusing workflows."
            https://docs.github.com/en/actions/using-workflows


                About workflows
                Triggering a workflow
                Manually running a workflow
                Disabling and enabling a workflow
                Events that trigger workflows
                Workflow syntax for GitHub Actions
                Workflow commands for GitHub Actions
                Reusing workflows
                Required workflows
                Caching dependencies to speed up workflows
                Storing workflow data as artifacts
                Creating starter workflows for your organization
                Sharing workflows, secrets, and runners with your organization
                Using GitHub CLI in workflows        


        Configuring a workflow to run manually
        https://docs.github.com/en/actions/using-workflows/manually-running-a-workflow#configuring-a-workflow-to-run-manually


            To trigger the workflow_dispatch event, your workflow must be in the default branch. 
            For more information about configuring the workflow_dispatch event, 
            see "Events that trigger workflows."
                https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#workflow_dispatch


            - workflow_dispatch
                This event will only trigger a workflow run if the workflow file is on the default branch.               

                You can manually trigger a workflow run using the GitHub API, GitHub CLI, or GitHub browser interface.



    --- Jobs
        https://docs.github.com/en/actions/using-jobs/using-jobs-in-a-workflow


        A workflow run is made up of one or more jobs, which run in parallel by default. 
        To run jobs sequentially, you can define dependencies on other jobs using the jobs.<job_id>.needs keyword.


        -- Job output:
            https://docs.github.com/en/actions/using-jobs/defining-outputs-for-jobs

            --- exemple ---

            jobs:
                job1:
                    runs-on: ubuntu-latest
                    # Map a step output to a job output
                    outputs:
                    output1: ${{ steps.step1.outputs.test }}
                    output2: ${{ steps.step2.outputs.test }}
                    steps:
                    - id: step1
                        run: echo "test=hello" >> "$GITHUB_OUTPUT"
                    - id: step2
                        run: echo "test=world" >> "$GITHUB_OUTPUT"
                job2:
                    runs-on: ubuntu-latest
                    needs: job1
                    steps:
                    - env:
                        OUTPUT1: ${{needs.job1.outputs.output1}}
                        OUTPUT2: ${{needs.job1.outputs.output2}}
                        run: echo "$OUTPUT1 $OUTPUT2"    


            --- example ---


        jobs:
        test_job:
            runs-on: ubuntu-latest
            # needs: [CONDUCTOR_BLOBBERS_01_TESTS]
            steps:
            - name: Test job
                run: echo "Test job"

            - name: Login to Docker Hub
                uses: docker/login-action@v2
                with:
                username: ${{ secrets.DOCKERHUB_USERNAME }}
                password: ${{ secrets.DOCKERHUB_PASSWORD }}


    --- Secrets
        https://docs.github.com/en/actions/security-guides/using-secrets-in-github-actions


        Secrets are variables that you create in an organization, repository, or repository environment. 
        The secrets that you create are available to use in GitHub Actions workflows. 
        GitHub Actions can only read a secret if you explicitly include the secret in a workflow.

        For secrets stored at the environment level, you can enable required reviewers to control access to the secrets. 
        A workflow job cannot access environment secrets until approval is granted by required approvers.

















































